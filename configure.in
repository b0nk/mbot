dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/mbot.cpp)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(inc/config.h)

AC_CANONICAL_HOST
AC_DEFINE_UNQUOTED(HOST, "$host", HOST)

VERSION=`cat VERSION`
VERSION_STRING="mirage irc bot $VERSION"
AC_MSG_RESULT([configuring for $VERSION_STRING])

AM_INIT_AUTOMAKE(mbot, $VERSION, non_empty)

AC_DEFINE_UNQUOTED(VERSION, "$VERSION", VERSION)
AC_DEFINE_UNQUOTED(VERSION_STRING, "$VERSION_STRING", VERSION_STRING)

dnl
dnl Checks for programs.
dnl

AC_PROG_CPP
AC_PROG_CC([-Wall -O2])
AC_PROG_CXXCPP
AC_PROG_CXX
AC_PROG_MAKE_SET
AC_PROG_LD
AC_LANG_CPLUSPLUS

AC_PATH_PROG(PING_PATH, ping)
if test "$PING_PATH" != ""; then
  AC_DEFINE_UNQUOTED(PING_PATH, "$PING_PATH", PING_PATH)
else
  AC_MSG_WARN([ping usage in module 'extra' is disabled])
fi

AC_PATH_PROG(SENDMAIL_PATH, sendmail, "", $PATH:/usr/sbin)
if test "$SENDMAIL_PATH" != ""; then
  AC_DEFINE_UNQUOTED(SENDMAIL_PATH, "$SENDMAIL_PATH", SENDMAIL_PATH)
fi
AC_PATH_PROG(ECHO_PATH, echo)
if test "$ECHO_PATH" != ""; then
  AC_DEFINE_UNQUOTED(ECHO_PATH, "$ECHO_PATH", ECHO_PATH)
fi
AC_PATH_PROG(CAT_PATH, cat)
if test "$CAT_PATH" != ""; then
  AC_DEFINE_UNQUOTED(CAT_PATH, "$CAT_PATH", CAT_PATH)
fi
AC_PATH_PROG(WHOIS_PATH, whois)
if test "$WHOIS_PATH" != ""; then
  AC_DEFINE_UNQUOTED(WHOIS_PATH, "$WHOIS_PATH", WHOIS_PATH)
else
  AC_MSG_WARN([whois command in module 'whois' is disabled])
fi
AC_PATH_PROG(PERL_PATH, perl)
if test "$PERL_PATH" != ""; then
  AC_DEFINE_UNQUOTED(PERL_PATH, "$PERL_PATH", PERL_PATH)
else
  AC_MSG_WARN([sms sending in module 'watch' is disabled])
fi

if test "$SENDMAIL_PATH" = "" \
        || test "$ECHO_PATH" = "" \
        || test "$CAT_PATH" = ""; then
  AC_MSG_WARN([mail sending in module 'log' is disabled])
fi

dnl
dnl tcl
dnl

AC_ARG_ENABLE(tcl,
  AC_HELP_STRING(
    [--disable-tcl],[disable Tcl support]),
  [case "${enable_tcl}" in
  no)
    AC_MSG_NOTICE([Disabling Tcl at user request])
    tcl=no
    ;;
  *)
    tcl=yes
    ;;
  esac],
  [tcl=yes]
)
if test "X$tcl" = "Xyes"; then
  CMU_TCL
else
  with_tcl="no"
fi
if test "X$with_tcl" = "Xno"; then
  AC_MSG_WARN(Tcl not available and module tcl won't be built!)
  TCL=""
else
  TCL="tcl"
fi
AC_SUBST(TCL)

dnl
dnl xml
dnl

AC_ARG_ENABLE(xml,
  AC_HELP_STRING(
    [--disable-xml],[disable XML support]),
  [case "${enable_xml}" in
  no)
    AC_MSG_NOTICE([Disabling XML at user request])
    xml=no
    ;;
  *)
    xml=yes
    ;;
  esac],
  [xml=yes]
)
if test "X$xml" = "Xyes"; then
  AC_PATH_PROG(XMLCONFIG_PATH, xml-config)
fi
if test "X$XMLCONFIG_PATH" != "X"; then
  XML_CPPFLAGS=`$XMLCONFIG_PATH --cflags`
  XML_LIBS=`$XMLCONFIG_PATH --libs`
  ac_link_old="$ac_link"
  ac_link="$ac_link $XML_LIBS"
  LIBS_OLD="$LIBS"
  AC_CHECK_LIB(xml, xmlParseMemory)
  dnl at least version 1.3.7 doesn't have this
  AC_CHECK_FUNCS(xmlKeepBlanksDefault)
  ac_link="$ac_link_old"
  LIBS="$LIBS_OLD"
  ac_compile_old="$ac_compile"
  ac_compile="$ac_compile $XML_CPPFLAGS"
  ac_cpp_old="$ac_cpp"
  ac_cpp="$ac_cpp $XML_CPPFLAGS"
  AC_CHECK_HEADERS(xmlmemory.h parser.h)
  ac_compile="$ac_compile_old"
  ac_cpp="$ac_cpp_old"
fi
if test "X$ac_cv_lib_xml_xmlParseMemory" = "Xyes" && test "X$ac_cv_header_xmlmemory_h" = "Xyes" && test "X$ac_cv_header_parser_h" = "Xyes"; then
  WEB="web"
  has_xml="yes"
else
  AC_MSG_WARN(XML not available and module web won't be built!)
  XML_CPPFLAGS=""
  XML_LIBS=""
  WEB=""
  has_xml="no"
fi
AC_SUBST(XML_CPPFLAGS)
AC_SUBST(XML_LIBS)
AC_SUBST(WEB)

dnl
dnl SSP - http://www.research.ibm.com/trl/projects/security/ssp/
dnl

AC_ARG_ENABLE(ssp,
  AC_HELP_STRING(
    [--disable-ssp],[disable SSP support]),
  [case "${enable_ssp}" in
  no)
    AC_MSG_NOTICE([Disabling SSP at user request])
    ssp=no
    ;;
  *)
    ssp=yes
    ;;
  esac],
  [ssp=yes]
)
if test "X$ssp" = "Xyes"; then
  GCC_STACK_PROTECT_CXX
fi

dnl
dnl IPv6
dnl

dnl Configure IPv6 support
ipv6=
AC_ARG_ENABLE(ipv6,
  AC_HELP_STRING(
    [--disable-ipv6],[disable IPv6 support]),
  [case "${enable_ipv6}" in
  no)
    AC_MSG_NOTICE([Disabling IPv6 at user request])
    ipv6=no
    ;;
  *)
    ipv6=yes
    ;;
  esac],
  [ipv6=yes]
)

dnl Check for sockaddr_in6
if test "X$ipv6" = "Xyes"; then
  TYPE_STRUCT_SOCKADDR_IN6(,[
    AC_MSG_NOTICE([Disabling IPv6 support: 'struct sockaddr_in6' support is required])
    ipv6=no
  ])
  dnl Check for scope id
  MEMBER_SIN6_SCOPE_ID
fi

dnl Check for in6 protocol flags (AF_INET6, etc)
if test "X$ipv6" = "Xyes"; then
  PROTO_INET6(,[
    AC_MSG_NOTICE([Disabling IPv6 support: INET6 protocol support is required])
    ipv6=no
  ])
fi

if test "X$ipv6" = "Xyes"; then
  AC_DEFINE([ENABLE_IPV6], 1, [Define if IPv6 support is enabled.])
fi

AC_ARG_ENABLE(stack-guess,
  AC_HELP_STRING(
    [--disable-stack-guess],
    [disable guess of IPv6 stack]
  ),
  [case "${enable_stack_guess}" in
  yes)
    stack_guess=yes
    ;;
  no)
    stack_guess=no
    ;;
  *)
    AC_MSG_ERROR(bad value ${enable_stack_guess} for --enable-stack-guess option)
    ;;
  esac],
  [stack_guess=yes]
)

if test "X$stack_guess" != "Xno"; then
  IN6_GUESS_STACK
  CFLAGS="${C_CFLAGS} ${INET6_CFLAGS}"
  LIBS="${INET6_LIBS} ${LIBS}"
fi

dnl
dnl Checks for libraries.
dnl

AC_CHECK_LIB(socket, setsockopt)
AC_CHECK_LIB(nsl, gethostbyname)

dnl check this only because tcl sometimes requires it
AC_CHECK_LIB(m, cos)

AC_CHECK_LIB(dl, dlopen)
if test $ac_cv_lib_dl_dlopen = "no"; then
  AC_CHECK_FUNCS(dlopen)
  if test $ac_cv_func_dlopen = "no"; then
    AC_MSG_ERROR([dynamic libraries not supported])
  fi
fi

AC_CHECK_LIB(crypt, crypt)
if test $ac_cv_lib_crypt_crypt = "no"; then
  AC_CHECK_FUNCS(crypt)
fi
if test $ac_cv_lib_crypt_crypt = "yes" || test $ac_cv_func_crypt = "yes"; then
  AC_DEFINE(MBOT_CRYPT, 1, MBOT_CRYPT)
fi

dnl
dnl Checks for header files.
dnl

AC_HEADER_TIME
AC_CHECK_HEADERS(stdlib.h \
                 fcntl.h \
                 sys/time.h \
                 unistd.h \
                 netinet/in_systm.h \
                 netinet/tcp.h \
                 string.h \
                 strings.h \
                 stdint.h \
                 sys/inttypes.h \
                 sys/bitypes.h \
                 crypt.h \
                 pwd.h \
                 grp.h \
                 iostream \
                 iomanip \
                 fstream \
                 ostream \
                 ostream.h)

dnl
dnl Checks for typedefs, structures, and compiler characteristics.
dnl

AC_C_CONST
AC_TYPE_SIGNAL
AC_CHECK_TYPE(size_t, unsigned)
AC_CHECK_TYPE(u_long, unsigned long)
AC_CHECK_TYPE(u_int, unsigned int)
AC_CHECK_TYPE(u_short, unsigned short)
AC_CHECK_TYPE(u_char, unsigned char)

AC_MSG_CHECKING([for socklen_t in sys/socket.h])
AC_EGREP_HEADER(socklen_t, sys/socket.h,
has_socklen_t=yes, has_socklen_t=no)
AC_MSG_RESULT($has_socklen_t)
if test "$has_socklen_t" = "no"; then
  AC_DEFINE(socklen_t, int, socklen_t)
fi

AC_MSG_CHECKING([for uint32_t])
AC_EGREP_CPP(dnl
changequote(<<,>>)dnl
<<(^|[^a-zA-Z_0-9])uint32_t[^a-zA-Z_0-9]>>dnl
changequote([,]), [#include <unistd.h>
#if HAVE_STDINT_H
# include <stdint.h>
#endif
#if HAVE_SYS_INTTYPES_H
# include <sys/inttypes.h>
#endif
#if HAVE_SYS_BITYPES_H
# include <sys/bitypes.h>
#endif], has_uint32_t=yes, has_uint32_t=no)
AC_MSG_RESULT($has_uint32_t)
if test "$has_uint32_t" = "no"; then
  AC_DEFINE(uint32_t, unsigned int, uint32_t)
fi

AC_MSG_CHECKING([for uint_fast32_t])
AC_EGREP_CPP(dnl
changequote(<<,>>)dnl
<<(^|[^a-zA-Z_0-9])uint_fast32_t[^a-zA-Z_0-9]>>dnl
changequote([,]), [#include <unistd.h>
#if HAVE_STDINT_H
# include <stdint.h>
#endif
#if HAVE_SYS_INTTYPES_H
# include <sys/inttypes.h>
#endif
#if HAVE_SYS_BITYPES_H
# include <sys/bitypes.h>
#endif], has_uint_fast32_t=yes, has_uint_fast32_t=no)
AC_MSG_RESULT($has_uint_fast32_t)
if test "$has_uint_fast32_t" = "no"; then
  AC_DEFINE(uint_fast32_t, unsigned int, uint_fast32_t)
fi

AC_MSG_CHECKING([for socklen_t in sys/socket.h])
AC_EGREP_HEADER(dnl
changequote(<<,>>)dnl
<<(^|[^a-zA-Z_0-9])socklen_t[^a-zA-Z_0-9]>>dnl
changequote([,]), sys/socket.h, has_socklen_t=yes, has_socklen_t=no)
AC_MSG_RESULT($has_socklen_t)
if test "$has_socklen_t" = "no"; then
  AC_DEFINE(socklen_t, int, socklen_t)
fi

AC_MSG_CHECKING([for TIOCNOTTY in sys/ioctl.h])
AC_EGREP_CPP("yes", [#include <sys/ioctl.h>
#ifdef TIOCNOTTY
yes
#endif], has_tiocnotty=yes, has_tiocnotty=no)
AC_MSG_RESULT($has_tiocnotty)
if test "$has_tiocnotty" = "yes"; then
  AC_DEFINE(HAVE_TIOCNOTTY, 1, HAVE_TIOCNOTTY)
fi

AC_MSG_CHECKING([for ios::binary])
AC_TRY_COMPILE([#include <iostream.h>
#include <iomanip.h>
#include <fstream.h>],[return (int)ios::binary;],
has_ios_binary=yes, has_ios_binary=no)
AC_MSG_RESULT($has_ios_binary)
if test "$has_ios_binary" = "yes"; then
  AC_DEFINE(HAS_IOS_BINARY, 1, HAS_IOS_BINARY)
fi

AC_MSG_CHECKING([for ios::nocreate])
AC_TRY_COMPILE([#include <iostream.h>
#include <iomanip.h>
#include <fstream.h>],[return (int)ios::nocreate;],
has_ios_nocreate=yes, has_ios_nocreate=no)
AC_MSG_RESULT($has_ios_nocreate)
if test "$has_ios_nocreate" = "yes"; then
  AC_DEFINE(HAS_IOS_NOCREATE, 1, HAS_IOS_NOCREATE)
fi

AC_MSG_CHECKING([for ios::noreplace])
AC_TRY_COMPILE([#include <iostream.h>
#include <iomanip.h>
#include <fstream.h>],[return (int)ios::noreplace;],
has_ios_noreplace=yes, has_ios_noreplace=no)
AC_MSG_RESULT($has_ios_noreplace)
if test "$has_ios_noreplace" = "yes"; then
  AC_DEFINE(HAS_IOS_NOREPLACE, 1, HAS_IOS_NOREPLACE)
fi

dnl gcc 3.2 barfs with AC_CHECK_FUNC(mkstemp), go figure
AC_MSG_CHECKING([for mkstemp])
AC_TRY_COMPILE([int mkstemp(char *);],[return (int)mkstemp ((char *)0);],
have_mkstemp=yes, have_mkstemp=no)
AC_MSG_RESULT($have_mkstemp)
if test "$have_mkstemp" = "yes"; then
  AC_DEFINE(HAVE_MKSTEMP, 1, HAVE_MKSTEMP)
fi

AC_MSG_CHECKING([for fstream.attach])
AC_TRY_COMPILE([#include <fstream>
class fstreamtmp : public fstream {
fstreamtmp::fstreamtmp (void) : fstream () {
  attach (0);
}};],[return 0],
have_fstream_attach=yes, have_fstream_attach=no)
AC_MSG_RESULT($have_fstream_attach)
if test "$have_fstream_attach" = "yes"; then
  AC_DEFINE(HAVE_FSTREAM_ATTACH, 1, HAVE_FSTREAM_ATTACH)
fi

AC_MSG_CHECKING([for vsnprintf in stdio.h])
AC_EGREP_HEADER(vsnprintf, stdio.h,
has_vsnprintf_t=yes, has_vsnprintf_t=no)
AC_MSG_RESULT($has_vsnprintf_t)
if test "$has_vsnprintf_t" = "yes"; then
  AC_DEFINE(HAVE_VSNPRINTF_T, 1, HAVE_VSNPRINTF_T)
fi

AC_MSG_CHECKING([for snprintf in stdio.h])
AC_EGREP_HEADER(snprintf, stdio.h,
has_snprintf_t=yes, has_snprintf_t=no)
AC_MSG_RESULT($has_snprintf_t)
if test "$has_snprintf_t" = "yes"; then
  AC_DEFINE(HAVE_SNPRINTF_T, 1, HAVE_SNPRINTF_T)
fi

dnl
dnl Checks for library functions.
dnl

AC_CHECK_FUNCS(vsnprintf \
               snprintf \
               strcasecmp \
               strncasecmp \
               getopt \
               memcpy \
               getpid \
               truncate \
               strsep \
               setsid \
               daemon \
               setuid \
               setgid \
               getpwnam \
               getgrnam)

if (test "$ac_cv_func_setuid" = "yes" &&
   test "$ac_cv_func_setgid" = "yes" &&
   test "$ac_cv_func_getpwnam" = "yes" &&
   test "$ac_cv_func_getgrnam" = "yes"); then
  has_setugid="yes"
  AC_DEFINE(HAS_SETUGID, 1, HAS_SETUGID)
else
  AC_MSG_WARN([setuid/setgid not supported])
  has_setugid="no"
fi

if test "X$ipv6" = "Xyes"; then
  AC_CHECK_FUNCS([getaddrinfo freeaddrinfo gai_strerror getnameinfo],,
    [AC_MSG_ERROR([Missing functions required to compile mbot with ipv6])]
  )
fi

dnl
dnl libtool's job :>
dnl

uname_s=`uname -s`

if test x$GCC = xyes; then
  SRC_CXXFLAGS="$CXXFLAGS -Wall"
  MOD_CXXFLAGS="$CXXFLAGS -Wall"
fi

if test "$host_vendor" = "dec"; then
  MOD_CXXFLAGS="$CXXFLAGS -Wall"
elif test "$host_os" = "cygwin"; then
  MOD_CXXFLAGS="$CXXFLAGS $XML_CFLAGS"
else
  MOD_CXXFLAGS="$CXXFLAGS -fPIC $XML_CFLAGS"
fi

if test "$host_os" = "cygwin" || test "X$uname_s" = "XSunOS"; then
  SRC_LDFLAGS="-Wrdynamic"
elif test "$host_vendor" = "dec"; then
  SRC_LDFLAGS="-call_shared"
else
  SRC_LDFLAGS="-rdynamic"
fi

# openbsd >3.3 needs this
if test "$ac_cv_cxx_compiler_gnu" = "yes" && test "X$uname_s" = "XOpenBSD"; then
  SRC_LDFLAGS="$SRC_LDFLAGS -Wl,-export-dynamic"
fi

if test "$uname_s" = "SunOS"; then
  MOD_LDFLAGS="-G"
elif test "$host_vendor" = "dec"; then
  MOD_LDFLAGS="-shared -expect_unresolved \*"
elif test "$host_os" = "cygwin"; then
  MOD_LDFLAGS="-shared"
elif test "$CXX" = "g++"; then
  MOD_LDFLAGS="-shared"
else
  # -Bstatic forces linking with .a libraries, openbsd apparently needs this
  MOD_LDFLAGS="-shared -Bstatic"
fi

AC_SUBST(SRC_CXXFLAGS)
AC_SUBST(MOD_CXXFLAGS)
AC_SUBST(SRC_LDFLAGS)
AC_SUBST(MOD_LDFLAGS)

if test "$LD_PATH" = "" || test "$CXX" = "g++"; then
  MOD_MAKE="\$(CXX) \$(CXXFLAGS) -I\$(INCLUDE) \$< \$(LDFLAGS) -o \$@"
  MOD_MAKE_TCL="\$(CXX) \$(CXXFLAGS) -I\$(INCLUDE) \$(TCL_CPPFLAGS) tcl.cpp \$(LDFLAGS) -o tcl.so"
  MOD_MAKE_WEB="\$(CXX) \$(CXXFLAGS) -I\$(INCLUDE) \$(XML_CPPFLAGS) web.cpp \$(LDFLAGS) -o web.so"
else
  MOD_MAKE="\$(CXX) \$(CXXFLAGS) -I\$(INCLUDE) \$< -c -o \$<.o && \$(LD) \$(LDFLAGS) $<.o -o \$@ && rm -f $<.o"
  MOD_MAKE="\$(CXX) \$(CXXFLAGS) -I\$(INCLUDE) \$(TCL_CPPFLAGS) tcp.cpp -c -o tcl.o && \$(LD) \$(LDFLAGS) tcl.o -o tcl.so && rm -f tcl.o"
  MOD_MAKE="\$(CXX) \$(CXXFLAGS) -I\$(INCLUDE) \$(XML_CPPFLAGS) web.cpp -c -o web.o && \$(LD) \$(LDFLAGS) web.o -o web.so && rm -f web.o"
fi
AC_SUBST(MOD_MAKE)
AC_SUBST(MOD_MAKE_TCL)
AC_SUBST(MOD_MAKE_WEB)

dnl The end

AC_OUTPUT(src/Makefile mod/Makefile Makefile)

echo
echo Configure summary for mbot $VERSION in $host
echo
echo -n "libtcl support for module tcl .......... "
dnl that's right, $with_tcl is either "no" or "", not "yes"... oh well
if test "X$with_tcl" = "Xno"; then echo no; else echo yes; fi
echo "libxml 1.x support for module web ...... $has_xml"
echo "ipv6 support ........................... $ipv6"
echo -n "ping available for module extra ........ "
if test "$PING_PATH" = ""; then echo no; else echo yes; fi
echo -n "sendmail available for module log ...... "
if test "$SENDMAIL_PATH" = ""; then echo no; else echo yes; fi
echo -n "whois available for module whois ....... "
if test "$WHOIS_PATH" = ""; then echo no; else echo yes; fi
echo "stack-smashing protector support ....... $ssp"
echo "set user/group id support .............. $has_setugid"
echo
